// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CachedCrawl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CachedCrawl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Arcusical {
namespace Web {

namespace {

const ::google::protobuf::Descriptor* CachedCrawl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachedCrawl_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CachedCrawl_2eproto() {
  protobuf_AddDesc_CachedCrawl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CachedCrawl.proto");
  GOOGLE_CHECK(file != NULL);
  CachedCrawl_descriptor_ = file->message_type(0);
  static const int CachedCrawl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedCrawl, checkedurls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedCrawl, uncheckedurls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedCrawl, allfoundurls_),
  };
  CachedCrawl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CachedCrawl_descriptor_,
      CachedCrawl::default_instance_,
      CachedCrawl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedCrawl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedCrawl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CachedCrawl));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CachedCrawl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CachedCrawl_descriptor_, &CachedCrawl::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CachedCrawl_2eproto() {
  delete CachedCrawl::default_instance_;
  delete CachedCrawl_reflection_;
}

void protobuf_AddDesc_CachedCrawl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021CachedCrawl.proto\022\rArcusical.Web\"O\n\013Ca"
    "chedCrawl\022\023\n\013checkedUrls\030\001 \003(\t\022\025\n\runchec"
    "kedUrls\030\002 \003(\t\022\024\n\014allFoundUrls\030\003 \003(\t", 115);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CachedCrawl.proto", &protobuf_RegisterTypes);
  CachedCrawl::default_instance_ = new CachedCrawl();
  CachedCrawl::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CachedCrawl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CachedCrawl_2eproto {
  StaticDescriptorInitializer_CachedCrawl_2eproto() {
    protobuf_AddDesc_CachedCrawl_2eproto();
  }
} static_descriptor_initializer_CachedCrawl_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CachedCrawl::kCheckedUrlsFieldNumber;
const int CachedCrawl::kUncheckedUrlsFieldNumber;
const int CachedCrawl::kAllFoundUrlsFieldNumber;
#endif  // !_MSC_VER

CachedCrawl::CachedCrawl()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Arcusical.Web.CachedCrawl)
}

void CachedCrawl::InitAsDefaultInstance() {
}

CachedCrawl::CachedCrawl(const CachedCrawl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Arcusical.Web.CachedCrawl)
}

void CachedCrawl::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CachedCrawl::~CachedCrawl() {
  // @@protoc_insertion_point(destructor:Arcusical.Web.CachedCrawl)
  SharedDtor();
}

void CachedCrawl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CachedCrawl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachedCrawl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachedCrawl_descriptor_;
}

const CachedCrawl& CachedCrawl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CachedCrawl_2eproto();
  return *default_instance_;
}

CachedCrawl* CachedCrawl::default_instance_ = NULL;

CachedCrawl* CachedCrawl::New() const {
  return new CachedCrawl;
}

void CachedCrawl::Clear() {
  checkedurls_.Clear();
  uncheckedurls_.Clear();
  allfoundurls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CachedCrawl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Arcusical.Web.CachedCrawl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string checkedUrls = 1;
      case 1: {
        if (tag == 10) {
         parse_checkedUrls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_checkedurls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->checkedurls(this->checkedurls_size() - 1).data(),
            this->checkedurls(this->checkedurls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "checkedurls");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_checkedUrls;
        if (input->ExpectTag(18)) goto parse_uncheckedUrls;
        break;
      }

      // repeated string uncheckedUrls = 2;
      case 2: {
        if (tag == 18) {
         parse_uncheckedUrls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_uncheckedurls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uncheckedurls(this->uncheckedurls_size() - 1).data(),
            this->uncheckedurls(this->uncheckedurls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uncheckedurls");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uncheckedUrls;
        if (input->ExpectTag(26)) goto parse_allFoundUrls;
        break;
      }

      // repeated string allFoundUrls = 3;
      case 3: {
        if (tag == 26) {
         parse_allFoundUrls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_allfoundurls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->allfoundurls(this->allfoundurls_size() - 1).data(),
            this->allfoundurls(this->allfoundurls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "allfoundurls");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_allFoundUrls;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Arcusical.Web.CachedCrawl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Arcusical.Web.CachedCrawl)
  return false;
#undef DO_
}

void CachedCrawl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Arcusical.Web.CachedCrawl)
  // repeated string checkedUrls = 1;
  for (int i = 0; i < this->checkedurls_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->checkedurls(i).data(), this->checkedurls(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "checkedurls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->checkedurls(i), output);
  }

  // repeated string uncheckedUrls = 2;
  for (int i = 0; i < this->uncheckedurls_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->uncheckedurls(i).data(), this->uncheckedurls(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "uncheckedurls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uncheckedurls(i), output);
  }

  // repeated string allFoundUrls = 3;
  for (int i = 0; i < this->allfoundurls_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->allfoundurls(i).data(), this->allfoundurls(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "allfoundurls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->allfoundurls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Arcusical.Web.CachedCrawl)
}

::google::protobuf::uint8* CachedCrawl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Arcusical.Web.CachedCrawl)
  // repeated string checkedUrls = 1;
  for (int i = 0; i < this->checkedurls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checkedurls(i).data(), this->checkedurls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "checkedurls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->checkedurls(i), target);
  }

  // repeated string uncheckedUrls = 2;
  for (int i = 0; i < this->uncheckedurls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uncheckedurls(i).data(), this->uncheckedurls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uncheckedurls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->uncheckedurls(i), target);
  }

  // repeated string allFoundUrls = 3;
  for (int i = 0; i < this->allfoundurls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->allfoundurls(i).data(), this->allfoundurls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "allfoundurls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->allfoundurls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Arcusical.Web.CachedCrawl)
  return target;
}

int CachedCrawl::ByteSize() const {
  int total_size = 0;

  // repeated string checkedUrls = 1;
  total_size += 1 * this->checkedurls_size();
  for (int i = 0; i < this->checkedurls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->checkedurls(i));
  }

  // repeated string uncheckedUrls = 2;
  total_size += 1 * this->uncheckedurls_size();
  for (int i = 0; i < this->uncheckedurls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->uncheckedurls(i));
  }

  // repeated string allFoundUrls = 3;
  total_size += 1 * this->allfoundurls_size();
  for (int i = 0; i < this->allfoundurls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->allfoundurls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachedCrawl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CachedCrawl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CachedCrawl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CachedCrawl::MergeFrom(const CachedCrawl& from) {
  GOOGLE_CHECK_NE(&from, this);
  checkedurls_.MergeFrom(from.checkedurls_);
  uncheckedurls_.MergeFrom(from.uncheckedurls_);
  allfoundurls_.MergeFrom(from.allfoundurls_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CachedCrawl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachedCrawl::CopyFrom(const CachedCrawl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedCrawl::IsInitialized() const {

  return true;
}

void CachedCrawl::Swap(CachedCrawl* other) {
  if (other != this) {
    checkedurls_.Swap(&other->checkedurls_);
    uncheckedurls_.Swap(&other->uncheckedurls_);
    allfoundurls_.Swap(&other->allfoundurls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CachedCrawl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachedCrawl_descriptor_;
  metadata.reflection = CachedCrawl_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Web
}  // namespace Arcusical

// @@protoc_insertion_point(global_scope)
