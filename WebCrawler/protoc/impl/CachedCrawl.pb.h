// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CachedCrawl.proto

#ifndef PROTOBUF_CachedCrawl_2eproto__INCLUDED
#define PROTOBUF_CachedCrawl_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Arcusical {
namespace Web {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CachedCrawl_2eproto();
void protobuf_AssignDesc_CachedCrawl_2eproto();
void protobuf_ShutdownFile_CachedCrawl_2eproto();

class CachedCrawl;

// ===================================================================

class CachedCrawl : public ::google::protobuf::Message {
 public:
  CachedCrawl();
  virtual ~CachedCrawl();

  CachedCrawl(const CachedCrawl& from);

  inline CachedCrawl& operator=(const CachedCrawl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CachedCrawl& default_instance();

  void Swap(CachedCrawl* other);

  // implements Message ----------------------------------------------

  CachedCrawl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CachedCrawl& from);
  void MergeFrom(const CachedCrawl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string checkedUrls = 1;
  inline int checkedurls_size() const;
  inline void clear_checkedurls();
  static const int kCheckedUrlsFieldNumber = 1;
  inline const ::std::string& checkedurls(int index) const;
  inline ::std::string* mutable_checkedurls(int index);
  inline void set_checkedurls(int index, const ::std::string& value);
  inline void set_checkedurls(int index, const char* value);
  inline void set_checkedurls(int index, const char* value, size_t size);
  inline ::std::string* add_checkedurls();
  inline void add_checkedurls(const ::std::string& value);
  inline void add_checkedurls(const char* value);
  inline void add_checkedurls(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& checkedurls() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_checkedurls();

  // repeated string uncheckedUrls = 2;
  inline int uncheckedurls_size() const;
  inline void clear_uncheckedurls();
  static const int kUncheckedUrlsFieldNumber = 2;
  inline const ::std::string& uncheckedurls(int index) const;
  inline ::std::string* mutable_uncheckedurls(int index);
  inline void set_uncheckedurls(int index, const ::std::string& value);
  inline void set_uncheckedurls(int index, const char* value);
  inline void set_uncheckedurls(int index, const char* value, size_t size);
  inline ::std::string* add_uncheckedurls();
  inline void add_uncheckedurls(const ::std::string& value);
  inline void add_uncheckedurls(const char* value);
  inline void add_uncheckedurls(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& uncheckedurls() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_uncheckedurls();

  // repeated string allFoundUrls = 3;
  inline int allfoundurls_size() const;
  inline void clear_allfoundurls();
  static const int kAllFoundUrlsFieldNumber = 3;
  inline const ::std::string& allfoundurls(int index) const;
  inline ::std::string* mutable_allfoundurls(int index);
  inline void set_allfoundurls(int index, const ::std::string& value);
  inline void set_allfoundurls(int index, const char* value);
  inline void set_allfoundurls(int index, const char* value, size_t size);
  inline ::std::string* add_allfoundurls();
  inline void add_allfoundurls(const ::std::string& value);
  inline void add_allfoundurls(const char* value);
  inline void add_allfoundurls(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& allfoundurls() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_allfoundurls();

  // @@protoc_insertion_point(class_scope:Arcusical.Web.CachedCrawl)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> checkedurls_;
  ::google::protobuf::RepeatedPtrField< ::std::string> uncheckedurls_;
  ::google::protobuf::RepeatedPtrField< ::std::string> allfoundurls_;
  friend void  protobuf_AddDesc_CachedCrawl_2eproto();
  friend void protobuf_AssignDesc_CachedCrawl_2eproto();
  friend void protobuf_ShutdownFile_CachedCrawl_2eproto();

  void InitAsDefaultInstance();
  static CachedCrawl* default_instance_;
};
// ===================================================================


// ===================================================================

// CachedCrawl

// repeated string checkedUrls = 1;
inline int CachedCrawl::checkedurls_size() const {
  return checkedurls_.size();
}
inline void CachedCrawl::clear_checkedurls() {
  checkedurls_.Clear();
}
inline const ::std::string& CachedCrawl::checkedurls(int index) const {
  // @@protoc_insertion_point(field_get:Arcusical.Web.CachedCrawl.checkedUrls)
  return checkedurls_.Get(index);
}
inline ::std::string* CachedCrawl::mutable_checkedurls(int index) {
  // @@protoc_insertion_point(field_mutable:Arcusical.Web.CachedCrawl.checkedUrls)
  return checkedurls_.Mutable(index);
}
inline void CachedCrawl::set_checkedurls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Arcusical.Web.CachedCrawl.checkedUrls)
  checkedurls_.Mutable(index)->assign(value);
}
inline void CachedCrawl::set_checkedurls(int index, const char* value) {
  checkedurls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arcusical.Web.CachedCrawl.checkedUrls)
}
inline void CachedCrawl::set_checkedurls(int index, const char* value, size_t size) {
  checkedurls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arcusical.Web.CachedCrawl.checkedUrls)
}
inline ::std::string* CachedCrawl::add_checkedurls() {
  return checkedurls_.Add();
}
inline void CachedCrawl::add_checkedurls(const ::std::string& value) {
  checkedurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arcusical.Web.CachedCrawl.checkedUrls)
}
inline void CachedCrawl::add_checkedurls(const char* value) {
  checkedurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arcusical.Web.CachedCrawl.checkedUrls)
}
inline void CachedCrawl::add_checkedurls(const char* value, size_t size) {
  checkedurls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arcusical.Web.CachedCrawl.checkedUrls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CachedCrawl::checkedurls() const {
  // @@protoc_insertion_point(field_list:Arcusical.Web.CachedCrawl.checkedUrls)
  return checkedurls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CachedCrawl::mutable_checkedurls() {
  // @@protoc_insertion_point(field_mutable_list:Arcusical.Web.CachedCrawl.checkedUrls)
  return &checkedurls_;
}

// repeated string uncheckedUrls = 2;
inline int CachedCrawl::uncheckedurls_size() const {
  return uncheckedurls_.size();
}
inline void CachedCrawl::clear_uncheckedurls() {
  uncheckedurls_.Clear();
}
inline const ::std::string& CachedCrawl::uncheckedurls(int index) const {
  // @@protoc_insertion_point(field_get:Arcusical.Web.CachedCrawl.uncheckedUrls)
  return uncheckedurls_.Get(index);
}
inline ::std::string* CachedCrawl::mutable_uncheckedurls(int index) {
  // @@protoc_insertion_point(field_mutable:Arcusical.Web.CachedCrawl.uncheckedUrls)
  return uncheckedurls_.Mutable(index);
}
inline void CachedCrawl::set_uncheckedurls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Arcusical.Web.CachedCrawl.uncheckedUrls)
  uncheckedurls_.Mutable(index)->assign(value);
}
inline void CachedCrawl::set_uncheckedurls(int index, const char* value) {
  uncheckedurls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arcusical.Web.CachedCrawl.uncheckedUrls)
}
inline void CachedCrawl::set_uncheckedurls(int index, const char* value, size_t size) {
  uncheckedurls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arcusical.Web.CachedCrawl.uncheckedUrls)
}
inline ::std::string* CachedCrawl::add_uncheckedurls() {
  return uncheckedurls_.Add();
}
inline void CachedCrawl::add_uncheckedurls(const ::std::string& value) {
  uncheckedurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arcusical.Web.CachedCrawl.uncheckedUrls)
}
inline void CachedCrawl::add_uncheckedurls(const char* value) {
  uncheckedurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arcusical.Web.CachedCrawl.uncheckedUrls)
}
inline void CachedCrawl::add_uncheckedurls(const char* value, size_t size) {
  uncheckedurls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arcusical.Web.CachedCrawl.uncheckedUrls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CachedCrawl::uncheckedurls() const {
  // @@protoc_insertion_point(field_list:Arcusical.Web.CachedCrawl.uncheckedUrls)
  return uncheckedurls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CachedCrawl::mutable_uncheckedurls() {
  // @@protoc_insertion_point(field_mutable_list:Arcusical.Web.CachedCrawl.uncheckedUrls)
  return &uncheckedurls_;
}

// repeated string allFoundUrls = 3;
inline int CachedCrawl::allfoundurls_size() const {
  return allfoundurls_.size();
}
inline void CachedCrawl::clear_allfoundurls() {
  allfoundurls_.Clear();
}
inline const ::std::string& CachedCrawl::allfoundurls(int index) const {
  // @@protoc_insertion_point(field_get:Arcusical.Web.CachedCrawl.allFoundUrls)
  return allfoundurls_.Get(index);
}
inline ::std::string* CachedCrawl::mutable_allfoundurls(int index) {
  // @@protoc_insertion_point(field_mutable:Arcusical.Web.CachedCrawl.allFoundUrls)
  return allfoundurls_.Mutable(index);
}
inline void CachedCrawl::set_allfoundurls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Arcusical.Web.CachedCrawl.allFoundUrls)
  allfoundurls_.Mutable(index)->assign(value);
}
inline void CachedCrawl::set_allfoundurls(int index, const char* value) {
  allfoundurls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Arcusical.Web.CachedCrawl.allFoundUrls)
}
inline void CachedCrawl::set_allfoundurls(int index, const char* value, size_t size) {
  allfoundurls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arcusical.Web.CachedCrawl.allFoundUrls)
}
inline ::std::string* CachedCrawl::add_allfoundurls() {
  return allfoundurls_.Add();
}
inline void CachedCrawl::add_allfoundurls(const ::std::string& value) {
  allfoundurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Arcusical.Web.CachedCrawl.allFoundUrls)
}
inline void CachedCrawl::add_allfoundurls(const char* value) {
  allfoundurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Arcusical.Web.CachedCrawl.allFoundUrls)
}
inline void CachedCrawl::add_allfoundurls(const char* value, size_t size) {
  allfoundurls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Arcusical.Web.CachedCrawl.allFoundUrls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CachedCrawl::allfoundurls() const {
  // @@protoc_insertion_point(field_list:Arcusical.Web.CachedCrawl.allFoundUrls)
  return allfoundurls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CachedCrawl::mutable_allfoundurls() {
  // @@protoc_insertion_point(field_mutable_list:Arcusical.Web.CachedCrawl.allFoundUrls)
  return &allfoundurls_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Web
}  // namespace Arcusical

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CachedCrawl_2eproto__INCLUDED
