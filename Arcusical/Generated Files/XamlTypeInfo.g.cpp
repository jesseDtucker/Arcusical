//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "Controls\AlbumListControl.xaml.h"
#include "Controls\SongPlayer.xaml.h"
#include "App.xaml.h"
#include "Pages\MainPage.xaml.h"
#include "Controls\SongListControl.xaml.h"

#include "Controls\AlbumListControl.g.hpp"
#include "Controls\SongPlayer.g.hpp"
#include "App.g.hpp"
#include "Pages\MainPage.g.hpp"
#include "Controls\SongListControl.g.hpp"

::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        _otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
    }
    return _otherProviders;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForName(::Platform::String^ typeName)
{
    ::Windows::UI::Xaml::Markup::IXamlType^ foundXamlType = nullptr;
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(typeName);
        if(xamlType != nullptr)
        {
            if(xamlType->IsConstructible)    // not Constructible means it might be a Return Type Stub
            {
                return xamlType;
            }
            foundXamlType = xamlType;
        }
    }
    return foundXamlType;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForType(::Windows::UI::Xaml::Interop::TypeName t)
{
    ::Windows::UI::Xaml::Markup::IXamlType^ foundXamlType = nullptr;
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(t);
        if(xamlType != nullptr)
        {
            if(xamlType->IsConstructible)    // not Constructible means it might be a Return Type Stub
            {
                return xamlType;
            }
            foundXamlType = xamlType;
        }
    }
    return foundXamlType;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    if (typeName == L"Windows.UI.Xaml.Controls.UserControl")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Object")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Controls.Page")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Boolean")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"UInt64")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"String")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Arcusical.AlbumListControl")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.UserControl"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Arcusical::AlbumListControl(); 
            };
        userType->SetIsLocalType();
        return userType;
    }

    if (typeName == L"Arcusical.SongPlayer")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.UserControl"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Arcusical::SongPlayer(); 
            };
        userType->SetIsLocalType();
        return userType;
    }

    if (typeName == L"Arcusical.Converters.IsPlayingToIconPath")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Arcusical::Converters::IsPlayingToIconPath(); 
            };
        userType->SetIsLocalType();
        return userType;
    }

    if (typeName == L"Arcusical.SongListControl")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.UserControl"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Arcusical::SongListControl(); 
            };
        userType->SetIsLocalType();
        return userType;
    }

    if (typeName == L"Arcusical.MainPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Arcusical::MainPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }

    if (typeName == L"Arcusical.ViewModel.SongVM")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"IsPlaying");
        userType->AddMemberName(L"PauseSongCmd");
        userType->AddMemberName(L"PlaySongCmd");
        userType->AddMemberName(L"Format");
        userType->AddMemberName(L"Length");
        userType->AddMemberName(L"Artist");
        userType->AddMemberName(L"Title");
        userType->SetIsBindable();
        userType->SetIsLocalType();
        return userType;
    }

    if (typeName == L"Arcusical.Commands.CommandWrapper")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->SetIsReturnTypeStub();
        userType->SetIsLocalType();
        return userType;
    }

    if (typeName == L"Arcusical.ViewModel.AudioFormat")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"System.Enum"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->FromStringConverter =
            [](::XamlTypeInfo::InfoProvider::XamlUserType^ userType, Platform::String^ input) -> Platform::Object^
            {
                uint32 enumValue = userType->CreateEnumUIntFromString(input);
                return ref new Platform::Box<Arcusical::ViewModel::AudioFormat>((Arcusical::ViewModel::AudioFormat)enumValue);
            };
        userType->AddEnumValue(L"UNKNOWN", ::Windows::Foundation::PropertyValue::CreateInt32((int)Arcusical::ViewModel::AudioFormat::UNKNOWN));
        userType->AddEnumValue(L"AAC", ::Windows::Foundation::PropertyValue::CreateInt32((int)Arcusical::ViewModel::AudioFormat::AAC));
        userType->AddEnumValue(L"ALAC", ::Windows::Foundation::PropertyValue::CreateInt32((int)Arcusical::ViewModel::AudioFormat::ALAC));
        userType->AddEnumValue(L"FLAC", ::Windows::Foundation::PropertyValue::CreateInt32((int)Arcusical::ViewModel::AudioFormat::FLAC));
        userType->AddEnumValue(L"MP3", ::Windows::Foundation::PropertyValue::CreateInt32((int)Arcusical::ViewModel::AudioFormat::MP3));
        userType->SetIsLocalType();
        return userType;
    }

    if (typeName == L"System.Enum")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"System.ValueType"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        return userType;
    }

    if (typeName == L"System.ValueType")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        return userType;
    }

    if (typeName == L"Arcusical.ViewModel.SongListVM")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"List");
        userType->SetIsBindable();
        userType->SetIsLocalType();
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IVector`1<Arcusical.ViewModel.SongVM>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IVector<::Arcusical::ViewModel::SongVM^>^)instance;
                auto newItem = (Arcusical::ViewModel::SongVM^)item;
                collection->Append(newItem);
            };
        userType->SetIsReturnTypeStub();
        return userType;
    }

    if (typeName == L"Arcusical.ViewModel.AlbumVM")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"ImagePath");
        userType->AddMemberName(L"Songs");
        userType->AddMemberName(L"Artist");
        userType->AddMemberName(L"Title");
        userType->SetIsBindable();
        userType->SetIsLocalType();
        return userType;
    }

    if (typeName == L"Arcusical.ViewModel.AlbumListVM")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Albums");
        userType->SetIsBindable();
        userType->SetIsLocalType();
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IVector`1<Arcusical.ViewModel.AlbumVM>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IVector<::Arcusical::ViewModel::AlbumVM^>^)instance;
                auto newItem = (Arcusical::ViewModel::AlbumVM^)item;
                collection->Append(newItem);
            };
        userType->SetIsReturnTypeStub();
        return userType;
    }

    if (typeName == L"Arcusical.ViewModel.AlbumListControlVM")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"AlbumList");
        userType->SetIsBindable();
        userType->SetIsLocalType();
        return userType;
    }

    if (typeName == L"Arcusical.ViewModel.SongListControlViewModel")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"SongList");
        userType->SetIsBindable();
        userType->SetIsLocalType();
        return userType;
    }

    return nullptr;
}

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    if (longMemberName == L"Arcusical.ViewModel.SongVM.IsPlaying")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"IsPlaying", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Arcusical::ViewModel::SongVM^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->IsPlaying);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Arcusical.ViewModel.SongVM.PauseSongCmd")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"PauseSongCmd", L"Arcusical.Commands.CommandWrapper");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Arcusical::ViewModel::SongVM^)instance;
                return that->PauseSongCmd;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Arcusical::ViewModel::SongVM^)instance;
                that->PauseSongCmd = (::Arcusical::Commands::CommandWrapper^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Arcusical.ViewModel.SongVM.PlaySongCmd")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"PlaySongCmd", L"Arcusical.Commands.CommandWrapper");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Arcusical::ViewModel::SongVM^)instance;
                return that->PlaySongCmd;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Arcusical::ViewModel::SongVM^)instance;
                that->PlaySongCmd = (::Arcusical::Commands::CommandWrapper^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Arcusical.ViewModel.SongVM.Format")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Format", L"Arcusical.ViewModel.AudioFormat");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Arcusical::ViewModel::SongVM^)instance;
                auto value = ref new ::Platform::Box<::Arcusical::ViewModel::AudioFormat>(that->Format);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Arcusical::ViewModel::SongVM^)instance;
                auto boxedValue = (::Platform::IBox<::Arcusical::ViewModel::AudioFormat>^)value;
                that->Format = (::Arcusical::ViewModel::AudioFormat)(boxedValue->Value);
            };
        return xamlMember;
    }

    if (longMemberName == L"Arcusical.ViewModel.SongVM.Length")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Length", L"UInt64");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Arcusical::ViewModel::SongVM^)instance;
                auto value = ref new ::Platform::Box<::default::uint64>(that->Length);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Arcusical::ViewModel::SongVM^)instance;
                auto boxedValue = (::Platform::IBox<::default::uint64>^)value;
                that->Length = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Arcusical.ViewModel.SongVM.Artist")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Artist", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Arcusical::ViewModel::SongVM^)instance;
                return that->Artist;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Arcusical::ViewModel::SongVM^)instance;
                that->Artist = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Arcusical.ViewModel.SongVM.Title")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Title", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Arcusical::ViewModel::SongVM^)instance;
                return that->Title;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Arcusical::ViewModel::SongVM^)instance;
                that->Title = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Arcusical.ViewModel.SongListVM.List")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"List", L"Windows.Foundation.Collections.IVector`1<Arcusical.ViewModel.SongVM>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Arcusical::ViewModel::SongListVM^)instance;
                return that->List;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Arcusical::ViewModel::SongListVM^)instance;
                that->List = (::Windows::Foundation::Collections::IVector<::Arcusical::ViewModel::SongVM^>^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Arcusical.ViewModel.AlbumVM.ImagePath")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"ImagePath", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Arcusical::ViewModel::AlbumVM^)instance;
                return that->ImagePath;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Arcusical::ViewModel::AlbumVM^)instance;
                that->ImagePath = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Arcusical.ViewModel.AlbumVM.Songs")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Songs", L"Arcusical.ViewModel.SongListVM");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Arcusical::ViewModel::AlbumVM^)instance;
                return that->Songs;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Arcusical::ViewModel::AlbumVM^)instance;
                that->Songs = (::Arcusical::ViewModel::SongListVM^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Arcusical.ViewModel.AlbumVM.Artist")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Artist", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Arcusical::ViewModel::AlbumVM^)instance;
                return that->Artist;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Arcusical::ViewModel::AlbumVM^)instance;
                that->Artist = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Arcusical.ViewModel.AlbumVM.Title")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Title", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Arcusical::ViewModel::AlbumVM^)instance;
                return that->Title;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Arcusical::ViewModel::AlbumVM^)instance;
                that->Title = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Arcusical.ViewModel.AlbumListVM.Albums")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Albums", L"Windows.Foundation.Collections.IVector`1<Arcusical.ViewModel.AlbumVM>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Arcusical::ViewModel::AlbumListVM^)instance;
                return that->Albums;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Arcusical::ViewModel::AlbumListVM^)instance;
                that->Albums = (::Windows::Foundation::Collections::IVector<::Arcusical::ViewModel::AlbumVM^>^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Arcusical.ViewModel.AlbumListControlVM.AlbumList")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"AlbumList", L"Arcusical.ViewModel.AlbumListVM");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Arcusical::ViewModel::AlbumListControlVM^)instance;
                return that->AlbumList;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Arcusical::ViewModel::AlbumListControlVM^)instance;
                that->AlbumList = (::Arcusical::ViewModel::AlbumListVM^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Arcusical.ViewModel.SongListControlViewModel.SongList")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SongList", L"Arcusical.ViewModel.SongListVM");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Arcusical::ViewModel::SongListControlViewModel^)instance;
                return that->SongList;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Arcusical::ViewModel::SongListControlViewModel^)instance;
                that->SongList = (::Arcusical::ViewModel::SongListVM^)value;
            };
        return xamlMember;
    }

    return nullptr;
}

