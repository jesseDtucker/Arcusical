// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CachedSong.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CachedSong.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Arcusical {
namespace LocalMusicStore {

namespace {

const ::google::protobuf::Descriptor* SongFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SongFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* CachedSong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachedSong_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Encoding_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CachedSong_2eproto() {
  protobuf_AddDesc_CachedSong_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CachedSong.proto");
  GOOGLE_CHECK(file != NULL);
  SongFile_descriptor_ = file->message_type(0);
  static const int SongFile_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongFile, encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongFile, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongFile, bitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongFile, samplesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongFile, channelcount_),
  };
  SongFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SongFile_descriptor_,
      SongFile::default_instance_,
      SongFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SongFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SongFile));
  CachedSong_descriptor_ = file->message_type(1);
  static const int CachedSong_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedSong, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedSong, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedSong, artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedSong, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedSong, files_),
  };
  CachedSong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CachedSong_descriptor_,
      CachedSong::default_instance_,
      CachedSong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedSong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedSong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CachedSong));
  Encoding_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CachedSong_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SongFile_descriptor_, &SongFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CachedSong_descriptor_, &CachedSong::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CachedSong_2eproto() {
  delete SongFile::default_instance_;
  delete SongFile_reflection_;
  delete CachedSong::default_instance_;
  delete CachedSong_reflection_;
}

void protobuf_AddDesc_CachedSong_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Arcusical::LocalMusicStore::protobuf_AddDesc_GUID_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020CachedSong.proto\022\031Arcusical.LocalMusic"
    "Store\032\nGUID.proto\"\212\001\n\010SongFile\0225\n\010encodi"
    "ng\030\001 \002(\0162#.Arcusical.LocalMusicStore.Enc"
    "oding\022\014\n\004file\030\002 \002(\t\022\017\n\007bitRate\030\003 \002(\005\022\022\n\n"
    "sampleSize\030\004 \002(\005\022\024\n\014channelCount\030\005 \002(\005\"\234"
    "\001\n\nCachedSong\022+\n\002id\030\001 \002(\0132\037.Arcusical.Lo"
    "calMusicStore.GUID\022\r\n\005title\030\002 \002(\t\022\016\n\006art"
    "ist\030\004 \002(\t\022\016\n\006length\030\005 \002(\003\0222\n\005files\030\006 \003(\013"
    "2#.Arcusical.LocalMusicStore.SongFile*=\n"
    "\010Encoding\022\013\n\007UNKNOWN\020\000\022\007\n\003AAC\020\001\022\010\n\004ALAC\020"
    "\002\022\007\n\003MP3\020\003\022\010\n\004FLAC\020\004", 420);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CachedSong.proto", &protobuf_RegisterTypes);
  SongFile::default_instance_ = new SongFile();
  CachedSong::default_instance_ = new CachedSong();
  SongFile::default_instance_->InitAsDefaultInstance();
  CachedSong::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CachedSong_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CachedSong_2eproto {
  StaticDescriptorInitializer_CachedSong_2eproto() {
    protobuf_AddDesc_CachedSong_2eproto();
  }
} static_descriptor_initializer_CachedSong_2eproto_;
const ::google::protobuf::EnumDescriptor* Encoding_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Encoding_descriptor_;
}
bool Encoding_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SongFile::kEncodingFieldNumber;
const int SongFile::kFileFieldNumber;
const int SongFile::kBitRateFieldNumber;
const int SongFile::kSampleSizeFieldNumber;
const int SongFile::kChannelCountFieldNumber;
#endif  // !_MSC_VER

SongFile::SongFile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Arcusical.LocalMusicStore.SongFile)
}

void SongFile::InitAsDefaultInstance() {
}

SongFile::SongFile(const SongFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Arcusical.LocalMusicStore.SongFile)
}

void SongFile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  encoding_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitrate_ = 0;
  samplesize_ = 0;
  channelcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SongFile::~SongFile() {
  // @@protoc_insertion_point(destructor:Arcusical.LocalMusicStore.SongFile)
  SharedDtor();
}

void SongFile::SharedDtor() {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (this != default_instance_) {
  }
}

void SongFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SongFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SongFile_descriptor_;
}

const SongFile& SongFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CachedSong_2eproto();
  return *default_instance_;
}

SongFile* SongFile::default_instance_ = NULL;

SongFile* SongFile::New() const {
  return new SongFile;
}

void SongFile::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SongFile*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(encoding_, channelcount_);
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SongFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Arcusical.LocalMusicStore.SongFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Arcusical.LocalMusicStore.Encoding encoding = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Arcusical::LocalMusicStore::Encoding_IsValid(value)) {
            set_encoding(static_cast< ::Arcusical::LocalMusicStore::Encoding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file;
        break;
      }

      // required string file = 2;
      case 2: {
        if (tag == 18) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bitRate;
        break;
      }

      // required int32 bitRate = 3;
      case 3: {
        if (tag == 24) {
         parse_bitRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitrate_)));
          set_has_bitrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sampleSize;
        break;
      }

      // required int32 sampleSize = 4;
      case 4: {
        if (tag == 32) {
         parse_sampleSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &samplesize_)));
          set_has_samplesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channelCount;
        break;
      }

      // required int32 channelCount = 5;
      case 5: {
        if (tag == 40) {
         parse_channelCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelcount_)));
          set_has_channelcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Arcusical.LocalMusicStore.SongFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Arcusical.LocalMusicStore.SongFile)
  return false;
#undef DO_
}

void SongFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Arcusical.LocalMusicStore.SongFile)
  // required .Arcusical.LocalMusicStore.Encoding encoding = 1;
  if (has_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encoding(), output);
  }

  // required string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file(), output);
  }

  // required int32 bitRate = 3;
  if (has_bitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bitrate(), output);
  }

  // required int32 sampleSize = 4;
  if (has_samplesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->samplesize(), output);
  }

  // required int32 channelCount = 5;
  if (has_channelcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->channelcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Arcusical.LocalMusicStore.SongFile)
}

::google::protobuf::uint8* SongFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Arcusical.LocalMusicStore.SongFile)
  // required .Arcusical.LocalMusicStore.Encoding encoding = 1;
  if (has_encoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->encoding(), target);
  }

  // required string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file(), target);
  }

  // required int32 bitRate = 3;
  if (has_bitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bitrate(), target);
  }

  // required int32 sampleSize = 4;
  if (has_samplesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->samplesize(), target);
  }

  // required int32 channelCount = 5;
  if (has_channelcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->channelcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Arcusical.LocalMusicStore.SongFile)
  return target;
}

int SongFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Arcusical.LocalMusicStore.Encoding encoding = 1;
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
    }

    // required string file = 2;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

    // required int32 bitRate = 3;
    if (has_bitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bitrate());
    }

    // required int32 sampleSize = 4;
    if (has_samplesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->samplesize());
    }

    // required int32 channelCount = 5;
    if (has_channelcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SongFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SongFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SongFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SongFile::MergeFrom(const SongFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encoding()) {
      set_encoding(from.encoding());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_bitrate()) {
      set_bitrate(from.bitrate());
    }
    if (from.has_samplesize()) {
      set_samplesize(from.samplesize());
    }
    if (from.has_channelcount()) {
      set_channelcount(from.channelcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SongFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SongFile::CopyFrom(const SongFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SongFile::Swap(SongFile* other) {
  if (other != this) {
    std::swap(encoding_, other->encoding_);
    std::swap(file_, other->file_);
    std::swap(bitrate_, other->bitrate_);
    std::swap(samplesize_, other->samplesize_);
    std::swap(channelcount_, other->channelcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SongFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SongFile_descriptor_;
  metadata.reflection = SongFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CachedSong::kIdFieldNumber;
const int CachedSong::kTitleFieldNumber;
const int CachedSong::kArtistFieldNumber;
const int CachedSong::kLengthFieldNumber;
const int CachedSong::kFilesFieldNumber;
#endif  // !_MSC_VER

CachedSong::CachedSong()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Arcusical.LocalMusicStore.CachedSong)
}

void CachedSong::InitAsDefaultInstance() {
  id_ = const_cast< ::Arcusical::LocalMusicStore::GUID*>(&::Arcusical::LocalMusicStore::GUID::default_instance());
}

CachedSong::CachedSong(const CachedSong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Arcusical.LocalMusicStore.CachedSong)
}

void CachedSong::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = NULL;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CachedSong::~CachedSong() {
  // @@protoc_insertion_point(destructor:Arcusical.LocalMusicStore.CachedSong)
  SharedDtor();
}

void CachedSong::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (artist_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete artist_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void CachedSong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachedSong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachedSong_descriptor_;
}

const CachedSong& CachedSong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CachedSong_2eproto();
  return *default_instance_;
}

CachedSong* CachedSong::default_instance_ = NULL;

CachedSong* CachedSong::New() const {
  return new CachedSong;
}

void CachedSong::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_id()) {
      if (id_ != NULL) id_->::Arcusical::LocalMusicStore::GUID::Clear();
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_artist()) {
      if (artist_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        artist_->clear();
      }
    }
    length_ = GOOGLE_LONGLONG(0);
  }
  files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CachedSong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Arcusical.LocalMusicStore.CachedSong)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Arcusical.LocalMusicStore.GUID id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // required string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_artist;
        break;
      }

      // required string artist = 4;
      case 4: {
        if (tag == 34) {
         parse_artist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->artist().data(), this->artist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artist");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_length;
        break;
      }

      // required int64 length = 5;
      case 5: {
        if (tag == 40) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_files;
        break;
      }

      // repeated .Arcusical.LocalMusicStore.SongFile files = 6;
      case 6: {
        if (tag == 50) {
         parse_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_files;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Arcusical.LocalMusicStore.CachedSong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Arcusical.LocalMusicStore.CachedSong)
  return false;
#undef DO_
}

void CachedSong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Arcusical.LocalMusicStore.CachedSong)
  // required .Arcusical.LocalMusicStore.GUID id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // required string artist = 4;
  if (has_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->artist(), output);
  }

  // required int64 length = 5;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->length(), output);
  }

  // repeated .Arcusical.LocalMusicStore.SongFile files = 6;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->files(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Arcusical.LocalMusicStore.CachedSong)
}

::google::protobuf::uint8* CachedSong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Arcusical.LocalMusicStore.CachedSong)
  // required .Arcusical.LocalMusicStore.GUID id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // required string artist = 4;
  if (has_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->artist(), target);
  }

  // required int64 length = 5;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->length(), target);
  }

  // repeated .Arcusical.LocalMusicStore.SongFile files = 6;
  for (int i = 0; i < this->files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->files(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Arcusical.LocalMusicStore.CachedSong)
  return target;
}

int CachedSong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Arcusical.LocalMusicStore.GUID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string artist = 4;
    if (has_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artist());
    }

    // required int64 length = 5;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->length());
    }

  }
  // repeated .Arcusical.LocalMusicStore.SongFile files = 6;
  total_size += 1 * this->files_size();
  for (int i = 0; i < this->files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->files(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachedSong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CachedSong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CachedSong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CachedSong::MergeFrom(const CachedSong& from) {
  GOOGLE_CHECK_NE(&from, this);
  files_.MergeFrom(from.files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::Arcusical::LocalMusicStore::GUID::MergeFrom(from.id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_artist()) {
      set_artist(from.artist());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CachedSong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachedSong::CopyFrom(const CachedSong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedSong::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->files())) return false;
  return true;
}

void CachedSong::Swap(CachedSong* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    std::swap(artist_, other->artist_);
    std::swap(length_, other->length_);
    files_.Swap(&other->files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CachedSong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachedSong_descriptor_;
  metadata.reflection = CachedSong_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LocalMusicStore
}  // namespace Arcusical

// @@protoc_insertion_point(global_scope)
