// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CachedAlbum.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CachedAlbum.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Arcusical {
namespace LocalMusicStore {

namespace {

const ::google::protobuf::Descriptor* CachedAlbum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachedAlbum_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CachedAlbum_2eproto() {
  protobuf_AddDesc_CachedAlbum_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CachedAlbum.proto");
  GOOGLE_CHECK(file != NULL);
  CachedAlbum_descriptor_ = file->message_type(0);
  static const int CachedAlbum_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedAlbum, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedAlbum, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedAlbum, artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedAlbum, imagefile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedAlbum, songlist_),
  };
  CachedAlbum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CachedAlbum_descriptor_,
      CachedAlbum::default_instance_,
      CachedAlbum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedAlbum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedAlbum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CachedAlbum));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CachedAlbum_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CachedAlbum_descriptor_, &CachedAlbum::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CachedAlbum_2eproto() {
  delete CachedAlbum::default_instance_;
  delete CachedAlbum_reflection_;
}

void protobuf_AddDesc_CachedAlbum_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Arcusical::LocalMusicStore::protobuf_AddDesc_GUID_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021CachedAlbum.proto\022\031Arcusical.LocalMusi"
    "cStore\032\nGUID.proto\"\237\001\n\013CachedAlbum\022+\n\002id"
    "\030\001 \002(\0132\037.Arcusical.LocalMusicStore.GUID\022"
    "\r\n\005title\030\002 \002(\t\022\016\n\006artist\030\003 \002(\t\022\021\n\timageF"
    "ile\030\004 \002(\t\0221\n\010songList\030\005 \003(\0132\037.Arcusical."
    "LocalMusicStore.GUID", 220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CachedAlbum.proto", &protobuf_RegisterTypes);
  CachedAlbum::default_instance_ = new CachedAlbum();
  CachedAlbum::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CachedAlbum_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CachedAlbum_2eproto {
  StaticDescriptorInitializer_CachedAlbum_2eproto() {
    protobuf_AddDesc_CachedAlbum_2eproto();
  }
} static_descriptor_initializer_CachedAlbum_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CachedAlbum::kIdFieldNumber;
const int CachedAlbum::kTitleFieldNumber;
const int CachedAlbum::kArtistFieldNumber;
const int CachedAlbum::kImageFileFieldNumber;
const int CachedAlbum::kSongListFieldNumber;
#endif  // !_MSC_VER

CachedAlbum::CachedAlbum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CachedAlbum::InitAsDefaultInstance() {
  id_ = const_cast< ::Arcusical::LocalMusicStore::GUID*>(&::Arcusical::LocalMusicStore::GUID::default_instance());
}

CachedAlbum::CachedAlbum(const CachedAlbum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CachedAlbum::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  artist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imagefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CachedAlbum::~CachedAlbum() {
  SharedDtor();
}

void CachedAlbum::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (artist_ != &::google::protobuf::internal::kEmptyString) {
    delete artist_;
  }
  if (imagefile_ != &::google::protobuf::internal::kEmptyString) {
    delete imagefile_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void CachedAlbum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachedAlbum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachedAlbum_descriptor_;
}

const CachedAlbum& CachedAlbum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CachedAlbum_2eproto();
  return *default_instance_;
}

CachedAlbum* CachedAlbum::default_instance_ = NULL;

CachedAlbum* CachedAlbum::New() const {
  return new CachedAlbum;
}

void CachedAlbum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::Arcusical::LocalMusicStore::GUID::Clear();
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_artist()) {
      if (artist_ != &::google::protobuf::internal::kEmptyString) {
        artist_->clear();
      }
    }
    if (has_imagefile()) {
      if (imagefile_ != &::google::protobuf::internal::kEmptyString) {
        imagefile_->clear();
      }
    }
  }
  songlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CachedAlbum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Arcusical.LocalMusicStore.GUID id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // required string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_artist;
        break;
      }

      // required string artist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_artist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->artist().data(), this->artist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_imageFile;
        break;
      }

      // required string imageFile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagefile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imagefile().data(), this->imagefile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_songList;
        break;
      }

      // repeated .Arcusical.LocalMusicStore.GUID songList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_songList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_songlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_songList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CachedAlbum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Arcusical.LocalMusicStore.GUID id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // required string artist = 3;
  if (has_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->artist(), output);
  }

  // required string imageFile = 4;
  if (has_imagefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagefile().data(), this->imagefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->imagefile(), output);
  }

  // repeated .Arcusical.LocalMusicStore.GUID songList = 5;
  for (int i = 0; i < this->songlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->songlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CachedAlbum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Arcusical.LocalMusicStore.GUID id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // required string artist = 3;
  if (has_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->artist(), target);
  }

  // required string imageFile = 4;
  if (has_imagefile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagefile().data(), this->imagefile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->imagefile(), target);
  }

  // repeated .Arcusical.LocalMusicStore.GUID songList = 5;
  for (int i = 0; i < this->songlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->songlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CachedAlbum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Arcusical.LocalMusicStore.GUID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string artist = 3;
    if (has_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artist());
    }

    // required string imageFile = 4;
    if (has_imagefile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagefile());
    }

  }
  // repeated .Arcusical.LocalMusicStore.GUID songList = 5;
  total_size += 1 * this->songlist_size();
  for (int i = 0; i < this->songlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->songlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachedAlbum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CachedAlbum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CachedAlbum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CachedAlbum::MergeFrom(const CachedAlbum& from) {
  GOOGLE_CHECK_NE(&from, this);
  songlist_.MergeFrom(from.songlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::Arcusical::LocalMusicStore::GUID::MergeFrom(from.id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_artist()) {
      set_artist(from.artist());
    }
    if (from.has_imagefile()) {
      set_imagefile(from.imagefile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CachedAlbum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachedAlbum::CopyFrom(const CachedAlbum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedAlbum::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  for (int i = 0; i < songlist_size(); i++) {
    if (!this->songlist(i).IsInitialized()) return false;
  }
  return true;
}

void CachedAlbum::Swap(CachedAlbum* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    std::swap(artist_, other->artist_);
    std::swap(imagefile_, other->imagefile_);
    songlist_.Swap(&other->songlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CachedAlbum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachedAlbum_descriptor_;
  metadata.reflection = CachedAlbum_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LocalMusicStore
}  // namespace Arcusical

// @@protoc_insertion_point(global_scope)
