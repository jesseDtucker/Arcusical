// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CachedAlbum.proto

#ifndef PROTOBUF_CachedAlbum_2eproto__INCLUDED
#define PROTOBUF_CachedAlbum_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "GUID.pb.h"
// @@protoc_insertion_point(includes)

namespace Arcusical {
namespace LocalMusicStore {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CachedAlbum_2eproto();
void protobuf_AssignDesc_CachedAlbum_2eproto();
void protobuf_ShutdownFile_CachedAlbum_2eproto();

class CachedAlbum;

// ===================================================================

class CachedAlbum : public ::google::protobuf::Message {
 public:
  CachedAlbum();
  virtual ~CachedAlbum();

  CachedAlbum(const CachedAlbum& from);

  inline CachedAlbum& operator=(const CachedAlbum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CachedAlbum& default_instance();

  void Swap(CachedAlbum* other);

  // implements Message ----------------------------------------------

  CachedAlbum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CachedAlbum& from);
  void MergeFrom(const CachedAlbum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Arcusical.LocalMusicStore.GUID id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::Arcusical::LocalMusicStore::GUID& id() const;
  inline ::Arcusical::LocalMusicStore::GUID* mutable_id();
  inline ::Arcusical::LocalMusicStore::GUID* release_id();
  inline void set_allocated_id(::Arcusical::LocalMusicStore::GUID* id);

  // required string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required string artist = 3;
  inline bool has_artist() const;
  inline void clear_artist();
  static const int kArtistFieldNumber = 3;
  inline const ::std::string& artist() const;
  inline void set_artist(const ::std::string& value);
  inline void set_artist(const char* value);
  inline void set_artist(const char* value, size_t size);
  inline ::std::string* mutable_artist();
  inline ::std::string* release_artist();
  inline void set_allocated_artist(::std::string* artist);

  // required string imageFile = 4;
  inline bool has_imagefile() const;
  inline void clear_imagefile();
  static const int kImageFileFieldNumber = 4;
  inline const ::std::string& imagefile() const;
  inline void set_imagefile(const ::std::string& value);
  inline void set_imagefile(const char* value);
  inline void set_imagefile(const char* value, size_t size);
  inline ::std::string* mutable_imagefile();
  inline ::std::string* release_imagefile();
  inline void set_allocated_imagefile(::std::string* imagefile);

  // repeated .Arcusical.LocalMusicStore.GUID songList = 5;
  inline int songlist_size() const;
  inline void clear_songlist();
  static const int kSongListFieldNumber = 5;
  inline const ::Arcusical::LocalMusicStore::GUID& songlist(int index) const;
  inline ::Arcusical::LocalMusicStore::GUID* mutable_songlist(int index);
  inline ::Arcusical::LocalMusicStore::GUID* add_songlist();
  inline const ::google::protobuf::RepeatedPtrField< ::Arcusical::LocalMusicStore::GUID >&
      songlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Arcusical::LocalMusicStore::GUID >*
      mutable_songlist();

  // @@protoc_insertion_point(class_scope:Arcusical.LocalMusicStore.CachedAlbum)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_artist();
  inline void clear_has_artist();
  inline void set_has_imagefile();
  inline void clear_has_imagefile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Arcusical::LocalMusicStore::GUID* id_;
  ::std::string* title_;
  ::std::string* artist_;
  ::std::string* imagefile_;
  ::google::protobuf::RepeatedPtrField< ::Arcusical::LocalMusicStore::GUID > songlist_;
  friend void  protobuf_AddDesc_CachedAlbum_2eproto();
  friend void protobuf_AssignDesc_CachedAlbum_2eproto();
  friend void protobuf_ShutdownFile_CachedAlbum_2eproto();

  void InitAsDefaultInstance();
  static CachedAlbum* default_instance_;
};
// ===================================================================


// ===================================================================

// CachedAlbum

// required .Arcusical.LocalMusicStore.GUID id = 1;
inline bool CachedAlbum::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CachedAlbum::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CachedAlbum::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CachedAlbum::clear_id() {
  if (id_ != NULL) id_->::Arcusical::LocalMusicStore::GUID::Clear();
  clear_has_id();
}
inline const ::Arcusical::LocalMusicStore::GUID& CachedAlbum::id() const {
  // @@protoc_insertion_point(field_get:Arcusical.LocalMusicStore.CachedAlbum.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::Arcusical::LocalMusicStore::GUID* CachedAlbum::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::Arcusical::LocalMusicStore::GUID;
  // @@protoc_insertion_point(field_mutable:Arcusical.LocalMusicStore.CachedAlbum.id)
  return id_;
}
inline ::Arcusical::LocalMusicStore::GUID* CachedAlbum::release_id() {
  clear_has_id();
  ::Arcusical::LocalMusicStore::GUID* temp = id_;
  id_ = NULL;
  return temp;
}
inline void CachedAlbum::set_allocated_id(::Arcusical::LocalMusicStore::GUID* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Arcusical.LocalMusicStore.CachedAlbum.id)
}

// required string title = 2;
inline bool CachedAlbum::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CachedAlbum::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CachedAlbum::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CachedAlbum::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& CachedAlbum::title() const {
  // @@protoc_insertion_point(field_get:Arcusical.LocalMusicStore.CachedAlbum.title)
  return *title_;
}
inline void CachedAlbum::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:Arcusical.LocalMusicStore.CachedAlbum.title)
}
inline void CachedAlbum::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:Arcusical.LocalMusicStore.CachedAlbum.title)
}
inline void CachedAlbum::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arcusical.LocalMusicStore.CachedAlbum.title)
}
inline ::std::string* CachedAlbum::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Arcusical.LocalMusicStore.CachedAlbum.title)
  return title_;
}
inline ::std::string* CachedAlbum::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CachedAlbum::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Arcusical.LocalMusicStore.CachedAlbum.title)
}

// required string artist = 3;
inline bool CachedAlbum::has_artist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CachedAlbum::set_has_artist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CachedAlbum::clear_has_artist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CachedAlbum::clear_artist() {
  if (artist_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    artist_->clear();
  }
  clear_has_artist();
}
inline const ::std::string& CachedAlbum::artist() const {
  // @@protoc_insertion_point(field_get:Arcusical.LocalMusicStore.CachedAlbum.artist)
  return *artist_;
}
inline void CachedAlbum::set_artist(const ::std::string& value) {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    artist_ = new ::std::string;
  }
  artist_->assign(value);
  // @@protoc_insertion_point(field_set:Arcusical.LocalMusicStore.CachedAlbum.artist)
}
inline void CachedAlbum::set_artist(const char* value) {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    artist_ = new ::std::string;
  }
  artist_->assign(value);
  // @@protoc_insertion_point(field_set_char:Arcusical.LocalMusicStore.CachedAlbum.artist)
}
inline void CachedAlbum::set_artist(const char* value, size_t size) {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    artist_ = new ::std::string;
  }
  artist_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arcusical.LocalMusicStore.CachedAlbum.artist)
}
inline ::std::string* CachedAlbum::mutable_artist() {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    artist_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Arcusical.LocalMusicStore.CachedAlbum.artist)
  return artist_;
}
inline ::std::string* CachedAlbum::release_artist() {
  clear_has_artist();
  if (artist_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = artist_;
    artist_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CachedAlbum::set_allocated_artist(::std::string* artist) {
  if (artist_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete artist_;
  }
  if (artist) {
    set_has_artist();
    artist_ = artist;
  } else {
    clear_has_artist();
    artist_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Arcusical.LocalMusicStore.CachedAlbum.artist)
}

// required string imageFile = 4;
inline bool CachedAlbum::has_imagefile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CachedAlbum::set_has_imagefile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CachedAlbum::clear_has_imagefile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CachedAlbum::clear_imagefile() {
  if (imagefile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagefile_->clear();
  }
  clear_has_imagefile();
}
inline const ::std::string& CachedAlbum::imagefile() const {
  // @@protoc_insertion_point(field_get:Arcusical.LocalMusicStore.CachedAlbum.imageFile)
  return *imagefile_;
}
inline void CachedAlbum::set_imagefile(const ::std::string& value) {
  set_has_imagefile();
  if (imagefile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagefile_ = new ::std::string;
  }
  imagefile_->assign(value);
  // @@protoc_insertion_point(field_set:Arcusical.LocalMusicStore.CachedAlbum.imageFile)
}
inline void CachedAlbum::set_imagefile(const char* value) {
  set_has_imagefile();
  if (imagefile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagefile_ = new ::std::string;
  }
  imagefile_->assign(value);
  // @@protoc_insertion_point(field_set_char:Arcusical.LocalMusicStore.CachedAlbum.imageFile)
}
inline void CachedAlbum::set_imagefile(const char* value, size_t size) {
  set_has_imagefile();
  if (imagefile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagefile_ = new ::std::string;
  }
  imagefile_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Arcusical.LocalMusicStore.CachedAlbum.imageFile)
}
inline ::std::string* CachedAlbum::mutable_imagefile() {
  set_has_imagefile();
  if (imagefile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagefile_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Arcusical.LocalMusicStore.CachedAlbum.imageFile)
  return imagefile_;
}
inline ::std::string* CachedAlbum::release_imagefile() {
  clear_has_imagefile();
  if (imagefile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imagefile_;
    imagefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CachedAlbum::set_allocated_imagefile(::std::string* imagefile) {
  if (imagefile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagefile_;
  }
  if (imagefile) {
    set_has_imagefile();
    imagefile_ = imagefile;
  } else {
    clear_has_imagefile();
    imagefile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Arcusical.LocalMusicStore.CachedAlbum.imageFile)
}

// repeated .Arcusical.LocalMusicStore.GUID songList = 5;
inline int CachedAlbum::songlist_size() const {
  return songlist_.size();
}
inline void CachedAlbum::clear_songlist() {
  songlist_.Clear();
}
inline const ::Arcusical::LocalMusicStore::GUID& CachedAlbum::songlist(int index) const {
  // @@protoc_insertion_point(field_get:Arcusical.LocalMusicStore.CachedAlbum.songList)
  return songlist_.Get(index);
}
inline ::Arcusical::LocalMusicStore::GUID* CachedAlbum::mutable_songlist(int index) {
  // @@protoc_insertion_point(field_mutable:Arcusical.LocalMusicStore.CachedAlbum.songList)
  return songlist_.Mutable(index);
}
inline ::Arcusical::LocalMusicStore::GUID* CachedAlbum::add_songlist() {
  // @@protoc_insertion_point(field_add:Arcusical.LocalMusicStore.CachedAlbum.songList)
  return songlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Arcusical::LocalMusicStore::GUID >&
CachedAlbum::songlist() const {
  // @@protoc_insertion_point(field_list:Arcusical.LocalMusicStore.CachedAlbum.songList)
  return songlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Arcusical::LocalMusicStore::GUID >*
CachedAlbum::mutable_songlist() {
  // @@protoc_insertion_point(field_mutable_list:Arcusical.LocalMusicStore.CachedAlbum.songList)
  return &songlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LocalMusicStore
}  // namespace Arcusical

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CachedAlbum_2eproto__INCLUDED
